:-consult(design).
:-consult(solver).
:-consult(orientationr).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% building instantiation 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

type(room1, ifcRoom).
type(wall1, ifcWall).
type(wall2, ifcWall).
type(wall3, ifcWall).
type(wall4, ifcWall).
type(door1, ifcDoor).
type(door2, ifcDoor).
type(sensor1, ifcSensor).
%type(sensor2, ifcSensor).
type(stair1, ifcStair).


% instantiate structural geometry
structural_geometry(room1, G) :-
    geometry(G, [(0,0),(0,18),(18,0),(18,18)]).

structural_geometry(wall1, G) :-
    geometry(G, (0,0), (0,18)).

structural_geometry(wall2, G) :-
    geometry(G, (0,18), (18,18)).

structural_geometry(wall3, G) :-
    geometry(G, (18,18), (18,0)).

structural_geometry(wall4, G) :-
    geometry(G, (18,0), (0,0)).

structural_geometry(door1, G) :-
    geometry(G, (0,13),(0,15)).

structural_geometry(door2, G) :-
    geometry(G, (0,0),(0,2)).

structural_geometry(sensor1, G) :-
    geometry(G, (18,14)).

%structural_geometry(sensor2, G) :-
 %   geometry(G, (1,1)).

structural_geometry(stair1, G) :-
    geometry(G, [(0,0),(0,8),(4,8),(4,0)]).

% instantiate functional geometry
functional_space(door1, Fs) :-
    geometry(Fs, [(0,13),(0,15),(2,15),(2,13)]).

functional_space(door2, Fs) :-
    geometry(Fs, [(0,0),(0,2),(2,0),(2,2)]).

functional_space(stair1, Fs) :-
    geometry(Fs, [(0,8),(0,9),(4,9),(4,8)]).

% instantiate operational geometry
operational_space(door1, Os) :-
    geometry(Os, (20,20)).

range_space(sensor1, Fs) :-
    geometry(Fs, [(18,14),(0,18),(0,12)]).

